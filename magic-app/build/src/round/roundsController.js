var Magic;
(function (Magic) {
    var App;
    (function (App) {
        var Round;
        (function (Round) {
            var RoundsController = (function () {
                function RoundsController($scope, $stateParams, $http) {
                    var _this = this;
                    this.tournamentId = $stateParams["id"];
                    this.scope = $scope;
                    this.http = $http;
                    this.http.get("api/tournament/status/" + this.tournamentId).then(function (response) {
                        console.log(response);
                        _this.tournament = response.data.tournamentData;
                        _this.tournament.complete = response.data.complete;
                        _this.tournament.currentRound = response.data.currentRound;
                        _this.tournament.finalStandings = response.data.finalStandings;
                        _this.seatings = new Array(response.data.seatings.length);
                        for (var i = 0; i < _this.seatings.length; i++) {
                            _this.seatings[i] = response.data.seatings[i].name;
                        }
                    });
                }
                RoundsController.prototype.pairNextRound = function () {
                    var _this = this;
                    var latestRound = this.tournament.rounds[this.tournament.currentRound - 1];
                    latestRound.complete = true;
                    this.http.put("api/tournament/results/" + this.tournamentId, latestRound.matches).then(function (response) {
                        _this.tournament.rounds.push(response.data);
                        _this.tournament.currentRound = response.data.number;
                    });
                };
                RoundsController.prototype.undoLastRound = function () {
                    var _this = this;
                    this.http.delete("api/tournament/round/" + this.tournamentId).then(function (response) {
                        _this.tournament.complete = false;
                        var latestRound = _this.tournament.rounds[_this.tournament.currentRound - 1];
                        if (!latestRound.complete) {
                            _this.tournament.rounds.pop();
                        }
                        _this.tournament.rounds.pop();
                        _this.tournament.rounds.push(response.data);
                        _this.tournament.currentRound = _this.tournament.rounds.length;
                    });
                };
                RoundsController.prototype.getFinalStandings = function () {
                    var _this = this;
                    this.tournament.complete = true;
                    var latestRound = this.tournament.rounds[this.tournament.currentRound - 1];
                    latestRound.complete = true;
                    this.http.put("api/tournament/results/" + this.tournamentId, latestRound.matches).then(function () {
                        _this.http.get("api/tournament/standings/" + _this.tournamentId).then(function (response) {
                            _this.tournament.finalStandings = response.data;
                        });
                    });
                };
                RoundsController.prototype.downloadTournamentData = function () {
                    window.location.href = "api/tournament/export/" + this.tournamentId;
                };
                RoundsController.$inject = ["$scope", "$stateParams", "$http"];
                return RoundsController;
            })();
            Round.RoundsController = RoundsController;
            App.magic.controller("roundsController", RoundsController);
        })(Round = App.Round || (App.Round = {}));
    })(App = Magic.App || (Magic.App = {}));
})(Magic || (Magic = {}));

//# sourceMappingURL=data:application/json;base64,