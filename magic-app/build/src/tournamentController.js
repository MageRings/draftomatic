var Magic;
(function (Magic) {
    var App;
    (function (App) {
        var Tournament;
        (function (Tournament) {
            var TournamentController = (function () {
                function TournamentController($scope, $http, $state) {
                    this.tournamentModel = {
                        format: "Draft",
                        numRounds: null,
                        players: [],
                        set: null
                    };
                    this.http = $http;
                    this.state = $state;
                }
                TournamentController.prototype.startTournament = function () {
                    var _this = this;
                    console.log(this.tournamentModel.players);
                    console.log("rounds: " + this.tournamentModel.numRounds);
                    this.http.post("api/tournament/register", {
                        "players": this.tournamentModel.players,
                        "format": this.tournamentModel.format,
                        "code": this.tournamentModel.set,
                    }, {
                        "params": {
                            "rounds": this.tournamentModel.numRounds,
                        },
                    }).then(function (createTournamentResponse) {
                        var tournamentId = createTournamentResponse.data;
                        console.log(tournamentId);
                        _this.state.go("instance", { id: encodeURI(tournamentId) });
                    });
                };
                TournamentController.$inject = ["$scope", "$http", "$state"];
                return TournamentController;
            })();
            Tournament.TournamentController = TournamentController;
            App.magic.controller("tournamentController", TournamentController);
        })(Tournament = App.Tournament || (App.Tournament = {}));
    })(App = Magic.App || (Magic.App = {}));
})(Magic || (Magic = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvdXJuYW1lbnRDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbIk1hZ2ljIiwiTWFnaWMuQXBwIiwiTWFnaWMuQXBwLlRvdXJuYW1lbnQiLCJNYWdpYy5BcHAuVG91cm5hbWVudC5Ub3VybmFtZW50Q29udHJvbGxlciIsIk1hZ2ljLkFwcC5Ub3VybmFtZW50LlRvdXJuYW1lbnRDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiTWFnaWMuQXBwLlRvdXJuYW1lbnQuVG91cm5hbWVudENvbnRyb2xsZXIuc3RhcnRUb3VybmFtZW50Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPLEtBQUssQ0EwQ1g7QUExQ0QsV0FBTyxLQUFLO0lBQUNBLElBQUFBLEdBQUdBLENBMENmQTtJQTFDWUEsV0FBQUEsR0FBR0E7UUFBQ0MsSUFBQUEsVUFBVUEsQ0EwQzFCQTtRQTFDZ0JBLFdBQUFBLFVBQVVBLEVBQUNBLENBQUNBO1lBRXpCQztnQkFNSUMsOEJBQVlBLE1BQWlCQSxFQUFFQSxLQUFzQkEsRUFBRUEsTUFBMkJBO29CQUM5RUMsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0E7d0JBQ25CQSxNQUFNQSxFQUFFQSxPQUFPQTt3QkFDZkEsU0FBU0EsRUFBRUEsSUFBSUE7d0JBQ2ZBLE9BQU9BLEVBQUVBLEVBQUVBO3dCQUNYQSxHQUFHQSxFQUFFQSxJQUFJQTtxQkFDWkEsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBO29CQUNsQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0E7Z0JBQ3hCQSxDQUFDQTtnQkFFTUQsOENBQWVBLEdBQXRCQTtvQkFBQUUsaUJBbUJDQTtvQkFsQkdBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO29CQUMxQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3pEQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFNQSx5QkFBeUJBLEVBQzdDQTt3QkFDSUEsU0FBU0EsRUFBRUEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsT0FBT0E7d0JBQ3ZDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxNQUFNQTt3QkFDckNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLEdBQUdBO3FCQUNuQ0EsRUFDREE7d0JBQ0lBLFFBQVFBLEVBQUNBOzRCQUNMQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxTQUFTQTt5QkFDM0NBO3FCQUNKQSxDQUNBQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSx3QkFBd0JBO3dCQUM1QkEsSUFBSUEsWUFBWUEsR0FBR0Esd0JBQXdCQSxDQUFDQSxJQUFJQSxDQUFDQTt3QkFDakRBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO3dCQUMxQkEsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsVUFBVUEsRUFBRUEsRUFBQ0EsRUFBRUEsRUFBRUEsU0FBU0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzdEQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDUEEsQ0FBQ0E7Z0JBbENhRiw0QkFBT0EsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBRUEsT0FBT0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBbUMxREEsMkJBQUNBO1lBQURBLENBckNBRCxBQXFDQ0MsSUFBQUQ7WUFyQ1lBLCtCQUFvQkEsdUJBcUNoQ0EsQ0FBQUE7WUFFREEsU0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxvQkFBb0JBLENBQUNBLENBQUNBO1FBQ25FQSxDQUFDQSxFQTFDZ0JELFVBQVVBLEdBQVZBLGNBQVVBLEtBQVZBLGNBQVVBLFFBMEMxQkE7SUFBREEsQ0FBQ0EsRUExQ1lELEdBQUdBLEdBQUhBLFNBQUdBLEtBQUhBLFNBQUdBLFFBMENmQTtBQUFEQSxDQUFDQSxFQTFDTSxLQUFLLEtBQUwsS0FBSyxRQTBDWCIsImZpbGUiOiJ0b3VybmFtZW50Q29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBNYWdpYy5BcHAuVG91cm5hbWVudCB7XG5cbiAgICBleHBvcnQgY2xhc3MgVG91cm5hbWVudENvbnRyb2xsZXIge1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRodHRwXCIsIFwiJHN0YXRlXCJdO1xuICAgICAgICBwdWJsaWMgdG91cm5hbWVudE1vZGVsOiBNYWdpYy5BcHAuRHJhZnRDb25maWcuSVRvdXJuYW1lbnRNb2RlbDtcbiAgICAgICAgcHVibGljIHN0YXRlOiBuZy51aS5JU3RhdGVTZXJ2aWNlO1xuICAgICAgICBwcml2YXRlIGh0dHA6IG5nLklIdHRwU2VydmljZTtcbiAgICAgICAgY29uc3RydWN0b3IoJHNjb3BlOiBuZy5JU2NvcGUsICRodHRwOiBuZy5JSHR0cFNlcnZpY2UsICRzdGF0ZTogbmcudWkuSVN0YXRlU2VydmljZSkge1xuICAgICAgICAgICAgdGhpcy50b3VybmFtZW50TW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcIkRyYWZ0XCIsXG4gICAgICAgICAgICAgICAgbnVtUm91bmRzOiBudWxsLFxuICAgICAgICAgICAgICAgIHBsYXllcnM6IFtdLFxuICAgICAgICAgICAgICAgIHNldDogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaHR0cCA9ICRodHRwO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICRzdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHVibGljIHN0YXJ0VG91cm5hbWVudCgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMudG91cm5hbWVudE1vZGVsLnBsYXllcnMpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyb3VuZHM6IFwiICsgdGhpcy50b3VybmFtZW50TW9kZWwubnVtUm91bmRzKTtcbiAgICAgICAgICAgIHRoaXMuaHR0cC5wb3N0PGFueT4oXCJhcGkvdG91cm5hbWVudC9yZWdpc3RlclwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicGxheWVyc1wiOiB0aGlzLnRvdXJuYW1lbnRNb2RlbC5wbGF5ZXJzLFxuICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IHRoaXMudG91cm5hbWVudE1vZGVsLmZvcm1hdCxcbiAgICAgICAgICAgICAgICBcImNvZGVcIjogdGhpcy50b3VybmFtZW50TW9kZWwuc2V0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInBhcmFtc1wiOntcbiAgICAgICAgICAgICAgICAgICAgXCJyb3VuZHNcIjogdGhpcy50b3VybmFtZW50TW9kZWwubnVtUm91bmRzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApLnRoZW4oKGNyZWF0ZVRvdXJuYW1lbnRSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciB0b3VybmFtZW50SWQgPSBjcmVhdGVUb3VybmFtZW50UmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0b3VybmFtZW50SWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZ28oXCJpbnN0YW5jZVwiLCB7aWQ6IGVuY29kZVVSSSh0b3VybmFtZW50SWQpfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hZ2ljLmNvbnRyb2xsZXIoXCJ0b3VybmFtZW50Q29udHJvbGxlclwiLCBUb3VybmFtZW50Q29udHJvbGxlcik7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=